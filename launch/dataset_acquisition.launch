<launch>

	<!-- set up parameters -->
	<arg name="category" value="tuna" /> <!-- the name of the current object -->
	<arg name="verbose" value="false" /> <!-- having issues? this can help debug -->

	<!-- launch RGB-D camera -->
	<include file="$(find openni2_launch)/launch/openni2.launch">
		<arg name="depth_registration" value="true"/>
	</include>

	<!-- launch geometry-based region proposal node -->
	<!-- x,y,z min and max can be used to parameterize the workspace if known (optional) -->
	<node name="geom_region_proposal" pkg="geom_rcnn" type="geom_region_proposal" output="screen">
		<param name="xmin" value="-1.0" />
		<param name="xmax" value="1.0" />
		<param name="ymin" value="-1.0" />
		<param name="ymax" value="3.0" />
		<param name="zmin" value="0.5" />
		<param name="zmax" value="1.1" />
		<param name="verbose" value="$(arg verbose)" />
	</node>

	<!-- launches keyboard input node
			 pressing the space bar will designate whether or not to capture streaming data 
	-->
	<node name="keyboard_cb" pkg="geom_rcnn" type="keyboard_cb" output="screen"/>


	<!-- launch node that
	   ** captures streaming data off an rgb-d camera
	   data_dir - location where you would like to store the training data
	   init_idx - if you capture data on a single object class by running this code multiple times, you can set increase this variable to ensure that you do not overwrite old data
	   rate - the number of images to capture per second
	-->
	<node name="store_data" pkg="geom_rcnn" type="store_data.py" output="screen">
		<param name="category" value="$(arg category)" />
		<param name="data_dir" value="$(find geom_rcnn)/data/" />
		<param name="init_idx" value="0"/> 
		<param name="rate" value="10" /> 
	</node>

	<!-- launch rviz to visualize geometry-based region proposal method (optional) -->
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find geom_rcnn)/config/viz.rviz"/>

</launch>
